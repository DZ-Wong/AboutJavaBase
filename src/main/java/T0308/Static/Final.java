package T0308.Static;

/**
 * Created by vip on 2018/3/21.
 */
public class Final {
    /*final 关键字的误解*/
    /*是否可修改
    *  当final 修饰基本数据类型是，指的是数值恒定不变， 如果是static final 修饰，强调只有一份
    *  对对象引用使用时，表示对象引用恒定不变，但对象本身可以被修改，同样适用于数组
    *
    *  是否提高效率
    *  调用方法时，常规是{将自变量压入堆栈；跳至方法代码并执行它，跳回来，清除堆栈自变量；对返回值进行处理。}
    *  final方法，{用方法主体内实际代码的一个副本来替换方法调用。避免系统开销}
    *  只有在方法的代码量非常少，或者想明确禁止方法被覆盖的时候，才应考虑将一个方法设为final。
    *  */

    /* 类内private方法即为final。 绝不会被覆盖*/

    /**final关键字可以用于类，方法，变量前，用来表示该关键字修饰的类，方法，变量具有不可变的特性。
     * （1）final关键字用于基本数据类型前：这时表明该关键字修饰的变量是一个常量，在定义后该变量的值就不能被修改。
     （2）final关键字用于方法声明前：这时意味着该方法时最终方法，只能被调用，不能被覆盖，但是可以被重载。
     （3）final关键字用于类名前：此时该类被称为最终类，该类不能被其他类继承。
     */



    public static void test() {
        final int a;
        a = 9;
        //        a = 8;//这个就报错，初始化一次后不允许再改
    }

    /**
     finalize方法来自于java.lang.Object，用于回收资源。
     可以为任何一个类添加finalize方法。finalize方法将在垃圾回收器清除对象之前调用。
     在实际应用中，不要依赖使用该方法回收任何短缺的资源，这是因为很难知道这个方法什么时候被调用。

     */

    /**
     * finally
     当代码抛出一个异常时，就会终止方法中剩余代码的处理，并退出这个方法的执行。假如我们打开了一个文件，但在处理文件过程中发生异常，这时文件还没有被关闭，此时就会产生资源回收问题。对此，java提供了一种好的解决方案，那就是finally子句，finally子句中的语句是一定会被执行的，所以我们只要把前面说的文件关闭的语句放在finally子句中无论在读写文件中是否遇到异常退出，文件关闭语句都会执行，保证了资源的合理回收。

     */


}
